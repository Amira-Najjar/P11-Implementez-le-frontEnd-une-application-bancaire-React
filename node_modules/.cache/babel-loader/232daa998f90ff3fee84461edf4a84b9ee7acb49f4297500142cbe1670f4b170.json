{"ast":null,"code":"import { loginSuccess, loginFailure, setFirstName, setLastName, setUserName } from './userReducer';\nexport function login(email, password) {\n  return async dispatch => {\n    try {\n      const response = await fetch('http://localhost:3001/api/v1/user/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      const data = await response.json();\n      const {\n        firstName,\n        lastName,\n        token\n      } = data.body;\n      dispatch(loginSuccess({\n        firstName,\n        lastName,\n        token\n      }));\n      return {\n        payload: {\n          token\n        }\n      };\n    } catch (error) {\n      dispatch(loginFailure(error.message));\n    }\n  };\n}\nexport function getProfile(token) {\n  return async dispatch => {\n    try {\n      const response = await fetch('http://localhost:3001/api/v1/user/profile', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}` // Ajoutez le token d'authentification dans l'en-tête de la requête\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get profile data');\n      }\n      const data = await response.json();\n      const {\n        firstName,\n        lastName,\n        userName\n      } = data.body;\n      dispatch(setFirstName({\n        firstName\n      }));\n      dispatch(setLastName({\n        lastName\n      }));\n      dispatch(setUserName({\n        userName\n      }));\n      dispatch(setUserFirstName({\n        userFirstName: firstName\n      }));\n    } catch (error) {\n      console.log(error);\n      console.error(\"Cet utilisateur est inconnu, veuillez réessayer.\");\n    }\n  };\n}","map":{"version":3,"names":["loginSuccess","loginFailure","setFirstName","setLastName","setUserName","login","email","password","dispatch","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","firstName","lastName","token","payload","error","message","getProfile","userName","setUserFirstName","userFirstName","console","log"],"sources":["C:/Users/Amira/Desktop/argent-bank/src/User/userActions.js"],"sourcesContent":["import { loginSuccess, loginFailure ,setFirstName, setLastName,setUserName } from './userReducer';\r\nexport function login(email, password) {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/v1/user/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Login failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      const { firstName, lastName, token } = data.body;\r\n      dispatch(loginSuccess({ firstName, lastName, token }));\r\n      return { payload: { token } };\r\n    } catch (error) {\r\n      dispatch(loginFailure(error.message));\r\n    }\r\n  };\r\n}\r\nexport function getProfile(token) {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/v1/user/profile', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}` // Ajoutez le token d'authentification dans l'en-tête de la requête\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to get profile data');\r\n      }\r\n\r\n      const data = await response.json();\r\n      const { firstName, lastName, userName} = data.body;\r\n      dispatch(setFirstName({ firstName }));\r\n      dispatch(setLastName({  lastName }));\r\n      dispatch(setUserName({  userName }));\r\n      dispatch(setUserFirstName({ userFirstName: firstName }));\r\n    } catch (error) {\r\n      console.log(error);\r\n      console.error(\"Cet utilisateur est inconnu, veuillez réessayer.\");\r\n    }\r\n  };\r\n}"],"mappings":"AAAA,SAASA,YAAY,EAAEC,YAAY,EAAEC,YAAY,EAAEC,WAAW,EAACC,WAAW,QAAQ,eAAe;AACjG,OAAO,SAASC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACrC,OAAO,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAET,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MACjC;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,MAAM;QAAEC,SAAS;QAAEC,QAAQ;QAAEC;MAAM,CAAC,GAAGJ,IAAI,CAACL,IAAI;MAChDL,QAAQ,CAACR,YAAY,CAAC;QAAEoB,SAAS;QAAEC,QAAQ;QAAEC;MAAM,CAAC,CAAC,CAAC;MACtD,OAAO;QAAEC,OAAO,EAAE;UAAED;QAAM;MAAE,CAAC;IAC/B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdhB,QAAQ,CAACP,YAAY,CAACuB,KAAK,CAACC,OAAO,CAAC,CAAC;IACvC;EACF,CAAC;AACH;AACA,OAAO,SAASC,UAAUA,CAACJ,KAAK,EAAE;EAChC,OAAO,MAAOd,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASU,KAAM,EAAC,CAAC;QACrC;MACF,CAAC,CAAC;;MAEF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,MAAM;QAAEC,SAAS;QAAEC,QAAQ;QAAEM;MAAQ,CAAC,GAAGT,IAAI,CAACL,IAAI;MAClDL,QAAQ,CAACN,YAAY,CAAC;QAAEkB;MAAU,CAAC,CAAC,CAAC;MACrCZ,QAAQ,CAACL,WAAW,CAAC;QAAGkB;MAAS,CAAC,CAAC,CAAC;MACpCb,QAAQ,CAACJ,WAAW,CAAC;QAAGuB;MAAS,CAAC,CAAC,CAAC;MACpCnB,QAAQ,CAACoB,gBAAgB,CAAC;QAAEC,aAAa,EAAET;MAAU,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdM,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;MAClBM,OAAO,CAACN,KAAK,CAAC,kDAAkD,CAAC;IACnE;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}